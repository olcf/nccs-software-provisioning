{{ ansible_managed | comment(beginning="--[[", end="]]--", decoration="", prefix_count=0, postfix_count=0) }}

--[[
   The following code is admittedly quite poor and is slated to be refactored at some point in the future :)
]]--

--------------------------------------------------------------------------
-- @module SitePackage

require("strict")

-- global variable to keep track of module changes
gl_module_changes = {}

{% if NSP_LMOD_enable_logging %}
-- global variable to save load logs
gl_load_logs = {}
{% endif %}

-- imports
require("TermWidth")
require("pager")
local Hook = require("Hook")
local MT = require('MT')
local FrameStk = require('FrameStk')
local Cache = require("Cache")
local json = require("json")
local cosmic = require("Cosmic"):singleton()
local lfs = require("lfs")
local posix = require("posix")

-- declarations
local hostname = io.popen("hostname -f"):read("*a"):gsub("%s+", "") or "unknown"
local user = os.getenv("USER") or "unknown"
local system = cosmic:value("LMOD_SYSTEM_NAME") or "unknown"
local twidth = TermWidth()

local HIERARCHY = {
{% for component in NSP_LMOD_hierarchy %}
    ['{{ component }}'] = {
        members = {{ '{' }}{% for mod in NSP_LMOD_hierarchy[component].members %}'{{ mod }}', {% endfor %}{{ '}' }},
        paths = {
{% for pw in NSP_LMOD_hierarchy[component].paths %}
            {{ '{' }}path = '{{ pw.path }}', weight = {{ pw.weight }}{{ '}' }},
{% endfor %}
        },
        level = {{ NSP_LMOD_hierarchy[component].level }}
    },
{% endfor %}
}

local nv_mappings = {
{% for mapping in NSP_LMOD_nv_mappings %}
    ['{{ mapping }}'] = {{ '{' }}name = '{{ NSP_LMOD_nv_mappings[mapping].name }}', version = '{{ NSP_LMOD_nv_mappings[mapping].version }}'{{ '}' }},
{% endfor %}
}

pm_mappings = {
{% for mapping in NSP_LMOD_nv_mappings %}
{% set mapping_parts = mapping.split('/') %}
    { r = "{{ NSP_LMOD_nv_mappings[mapping].name.replace('%s', mapping_parts[0]) }}-{{ NSP_LMOD_nv_mappings[mapping].version.replace('%s', mapping_parts[1]) }}()", t = "{{ mapping }}%s" },
{% endfor %}
{% for component in NSP_LMOD_hierarchy  %}
{% for module in NSP_LMOD_hierarchy [component].members %}
    { r = "{{ module }}-(.*)", t = "{{ module }}/%s" },
{% endfor %}
{% endfor %}
}

local spack_modules_prefix = '{{ NSP_LMOD_spack_modules }}'

local path_names = {
{% for entry in NSP_LMOD_path_names %}
    ['{{ entry }}'] = '{{ NSP_LMOD_path_names[entry] }}',
{% endfor %}
}

-- functions
function tb_has_value(tb, val)
    --
    -- check if an index table contains a value
    --
    for i, v in ipairs(tb) do
        if v == val then
            return true
        end
    end
    return false
end

function map_nv(name, version)
    --
    -- map a module name and version to the spack name and version via. nv_mappings
    --
    if nv_mappings[name .. '/' .. version] ~= nil then
        return string.format(nv_mappings[name .. '/' .. version].name, name), string.format(nv_mappings[name .. '/' .. version].version, version)
    else
        return name, version
    end
end

function get_hierarchy_components(t_name, t_version)
    --
    -- get the hierarchy componentes that are loaded
    -- with the module being loaded taking precedence
    --

    -- get the original modules
    local mt = MT:singleton()
    local origMT = mt:list('userName', 'any')

    -- get the final set of modules
    local fl_module_tb = {}
    for i, v in ipairs(origMT) do
        fl_module_tb[v.sn] = string.sub(v.fullName, #v.sn + 2, #v.fullName)
    end
    for i, v in pairs(gl_module_changes) do
        if v.mode == 'load' then
            fl_module_tb[i] = v.version
        elseif v.mode == 'unload' then
            fl_module_tb[i] = nil
        end
    end

    -- pull list of componates from the hierarchy
    local components = {}
    for k, v in pairs(HIERARCHY) do
        components[k] = {
            active = false,
            name = nil,
            version = nil,
            module = nil
        }
    end

    -- check each componates status
    for k, v in pairs(components) do
        if tb_has_value(HIERARCHY[k].members, t_name) then
            v.active = true
            v.name, v.version = map_nv(t_name, t_version)
            v.module = string.format('%s/%s', t_name, t_version)
        else
            for i, m in ipairs(HIERARCHY[k].members) do
                if fl_module_tb[m] ~= nil then
                    v.active = true
                    v.name, v.version = map_nv(m, fl_module_tb[m])
                    v.module = string.format('%s/%s', m, fl_module_tb[m])
                    break
                end
            end
        end
    end

    return components
end

function configure_spack_modulepaths(t_module, components, mode)
    -- determin if the paths should be changed
    local change = false
    local t_component = nil
    for k, v in pairs(HIERARCHY) do
        if tb_has_value(v.members, t_module) then
            change = true
            t_component = k
            break
        end
    end
    if not change then return end

    -- unload
    if mode == 'unload' then
        -- clean module paths
        local module_path = os.getenv('MODULEPATH')
        for path in string.split(module_path, ':') do
            if string.find(path, string.gsub(string.format('%s.%s', components[t_component].name, components[t_component].version), '%-', '%%-')) ~= nil then
                remove_path('MODULEPATH', path)
            end
        end

    -- load
    elseif mode == 'load' then
        -- generate paths
        local paths = {}
        for i, v1 in ipairs(HIERARCHY[t_component].paths) do
            -- sub paths
            local p = {path = v1.path, weight = v1.weight}
            for k, v2 in pairs(components) do
                p.path = string.gsub(p.path, string.format('|%s.name|', k), tostring(v2.name))
                p.path = string.gsub(p.path, string.format('|%s.version|', k), tostring(v2.version))
            end
{% if NSP_LMOD_enable_spack_compiler_projections %}
            p.path = pathJoin(spack_modules_prefix, components['compiler'].name, components['compiler'].version, p.path) -- add spack Compiler folders
{% else %}
            p.path = pathJoin(spack_modules_prefix, p.path)
{% endif %}

            if not string.match(p.path, 'nil') then
                table.insert(paths, p)
            end
        end

        -- add new paths
        for i, v in ipairs(paths) do
            prepend_path{'MODULEPATH', v.path, priority=v.weight}
        end
    end

end

function observe_and_trigger(t)
    --
    -- log all module load/unload calls to the gt_module_changes
    -- and trigger spack modulepath changes
    --
    local frameStk = FrameStk:singleton()
    gl_module_changes[frameStk:sn()] = {
        ['version'] = string.sub(frameStk:fullName(), #frameStk:sn() + 2, #frameStk:fullName()),
        ['mode'] = mode()
    }

    local components = get_hierarchy_components(frameStk:sn(), string.sub(frameStk:fullName(), #frameStk:sn() + 2, #frameStk:fullName()))
    configure_spack_modulepaths(frameStk:sn(), components, mode())

{% if NSP_LMOD_enable_logging %}
    if mode() == "load" then
       register_module_loads(t)
    end
{% endif %}

end

function label_paths(t)
    -- Label NSP paths when human readable descriptions
    local availStyle = masterTbl().availStyle
    if availStyle ~= 'nsp-pretty' then
        return
    end

    local hc = get_hierarchy_components(nil, nil)
    local paths = {}
    for k, v in pairs(t) do
        local ss, spackish, proj, core, core_v
        ss = string.gsub(spack_modules_prefix, '%-', '%%-')
        spackish, proj = string.match(k, string.format('^(%s)/(.*)$', ss))
        if proj ~= nil then core, core_v = string.match(proj, '^(Core)/([a-z0-9\\.]*)$') end

        if spackish then
            local label
            if core ~= nil and core_v ~= nil then   -- handle Core
                label = string.format("[ %s/%s ]", core, core_v)
            else    -- deal with the rest of the paths
{% if NSP_LMOD_enable_spack_compiler_projections %}
                proj = string.gsub(proj, string.format('%s/%s/', hc['compiler'].name, hc['compiler'].version), '') -- strip spack Compiler folders
{% endif %}
                local m_set = {}
                for comp, d in pairs(hc) do
                    if d.active and string.match(k, string.gsub(string.format('%s-%s', d.name, d.version), '%-', '%%-')) then
                        table.insert(m_set, { module = d.module, level = HIERARCHY[comp].level })
                    end
                end
                table.sort(m_set, function (x, y) return x.level < y.level end)

                label = '[ '
                for i, dat in ipairs(m_set) do
                    if i == 1 then
                        label = label .. dat.module
                    else
                        label = label .. ', ' .. dat.module
                    end
                end
                label = label .. ' ]'
            end
            t[k] = label
        elseif k == '{{ NSP_module_root }}' then
            t[k] = "[ Base Modules ]"
        else
            for regex, label in pairs(path_names) do
                if string.match(k, string.format('.*%s.*', string.gsub(regex, '%-', '%%-'))) then
                    t[k] = label
                    break
                end
            end
        end
    end
end

--------------------------------------------------------------------------------
-- Spider related function
--------------------------------------------------------------------------------

function pairsByKeys(t)
    local a = {}
    for n in pairs(t) do
        table.insert(a, n)
    end
    table.sort(a)
    local i = 0      -- iterator variable
    local iter = function()   -- iterator function
        i = i + 1
        if a[i] == nil then
            return nil
        else
            return a[i], t[a[i]]
        end
    end
    return iter
end

function reverse(tbl)
  for i = 1, math.floor(#tbl / 2) do
    tbl[i], tbl[#tbl - i + 1] = tbl[#tbl - i + 1], tbl[i]
  end
  return tbl
end

function string:split_string(delimiter)
    --[[
        Split a string with a delimiter. Named 'split_string' to avoid a conflict with a similar function
        in Lmod which returns an iterator instead of a table.
    ]]--
    local result = {}
    local search_start = 1
    local i_start, i_end = string.find(self, delimiter, search_start, true)
    while i_start do
        if i_start ~= 1 then
            table.insert(result, string.sub(self, search_start, i_start - 1))
        end
        search_start = i_end + 1
        i_start, i_end = string.find(self, delimiter, search_start, true)
    end
    if search_start <= #self then
        table.insert(result, string.sub(self, search_start))
    end
    return result
end

function slice(a, i_start, i_end)
    --[[
        Slice an indexed table.
    ]]--
    local sliced = {}
    for i = i_start or 1, i_end or #a do
        sliced[#sliced + 1] = a[i]
    end
    return sliced
end

function rsdff(path)
    --[[
        Recursively search directory for files.
    ]]--
    -- clean end of path
    local fpath = path
    if path:sub(-1, -1) == "/" then
        fpath = path:sub(1, -2)
    end

    local flist = {}
    local fa = lfs.attributes(fpath)
    if fa == nil then
        return {}
    end
    if fa.mode == "directory" then
        for entry in lfs.dir(fpath) do
            if entry:sub(1, 1) ~= "." then  -- ignore '.', '..', and hidden files
                for index, file in ipairs(rsdff(fpath .. "/" .. entry)) do
                    table.insert(flist, file)
                end
            end
        end
    elseif fa.mode == "file" then
        table.insert(flist, fpath)
    end
    return flist
end

function olcf_supported(path)
    if path:find("/ums/", 1, true) then
        return false
    end
    return true
end

function trace_module_paths(m_path, mpath_map_t)
    --[[
        Trace a path to get the modules it depends on.
    ]]--
    if mpath_map_t[m_path] ~= nil then
        local reqs = {}
        for item_k, item_v in pairs(mpath_map_t[m_path]) do
            local m_name = item_k
            if not olcf_supported(item_v) then
                m_name = string.format("%s(NS)", item_k)
            end
            local res = trace_module_paths(mpath_map_t[m_path][item_k], mpath_map_t)
            for x_k, x_v in pairs(res) do
                table.insert(x_v, m_name)
                table.insert(reqs, x_v)
            end
        end
        return reqs
    else
        return { {},}
    end
end

function build_cache()
    local moduleT = {}
    local pathT = {}

    -- non-Core spack modules
    local smpr = spack_modules_prefix:gsub("%-", "%%-")
    -- loop over files
    for i, entry in ipairs(rsdff(spack_modules_prefix)) do
        -- extract relevant directories
        local projection_parts = entry:gsub(smpr, ""):split_string("/")
        if projection_parts[1] ~= "Core" and #projection_parts > 2 then

            local pqs = {}
            for ii, part in ipairs(slice(projection_parts, 3, #projection_parts - 2)) do
                for i, rt in ipairs(pm_mappings) do
                    local regexp = tostring(rt.r):gsub("%-", "%%-")
                    local subp = part:match(regexp)
                    if subp ~= nil then
                        if type(subp) == "string" then
                            table.insert(pqs, rt.t:format(subp))
                        else
                            table.insert(pqs, rt.t:format(""))
                        end
                        break
                    end
                end
            end

            local ts = "/" .. projection_parts[#projection_parts - 1] .. "/" .. projection_parts[#projection_parts]
            ts = ts:gsub("%-", "%%-")
            local mpathb = entry:gsub(tostring(ts), "")

            if #pqs > 0 then
                pathT[mpathb] = {
                    [table.concat(reverse(pqs), ";")] = true
                }
            end

            local formattedName = string.format(
                "%s/%s",
                projection_parts[#projection_parts - 1],
                projection_parts[#projection_parts]:gsub(".lua", "")
            )
            if not olcf_supported(entry) then
                formattedName = string.format(
                    "%s/%s(NS)",
                    projection_parts[#projection_parts - 1],
                    projection_parts[#projection_parts]:gsub(".lua", "")
                )
            end
            moduleT[entry] = {
                ["name"] = projection_parts[#projection_parts - 1],
                ["version"] = projection_parts[#projection_parts]:gsub(".lua", ""),
                ["olcfSupported"] = olcf_supported(entry),
                ["fullPath"] = entry,
                ["mPath"] = mpathb,
                ["formattedName"] = formattedName
            }

        end
    end

    -- lmod cache
    -- remove spack module paths from MODULEPATH
    local o_module_path = posix.getenv("MODULEPATH")
    local n_module_path = {}
    for ipath, vpath in ipairs(o_module_path:split_string(":")) do
        if not vpath:find(spack_modules_prefix, 1, true) then
            table.insert(n_module_path, vpath)
        end
    end
    n_module_path = table.concat(n_module_path, ":")
    posix.setenv("MODULEPATH", n_module_path)
    local lmod_cache = Cache:singleton{dontWrite=true, quiet=true, buildCache=true, buildFresh=true, noMRC=true}
    local spiderT, dbT, mpathMapT, providedByT = lmod_cache:build()
    posix.setenv("MODULEPATH", o_module_path)
    -- moduleT
    for m_path_k, m_path_v in pairs(spiderT) do
        if m_path_k ~= "version" then
            for mod_k, mod_v in pairs(spiderT[m_path_k]) do
                for ver_k, ver_v in pairs(spiderT[m_path_k][mod_k]["fileT"]) do
                    local formattedName = mod_k
                    if ver_v.canonical ~= "" then
                        formattedName = formattedName .. "/" .. ver_v.canonical
                    end
                    if not olcf_supported(ver_v.fn) then
                        formattedName = formattedName .. "(NS)"
                    end
                    moduleT[ver_v.fn] = {
                        ["name"] = mod_k,
                        ["version"] = ver_v.canonical,
                        ["olcfSupported"] = olcf_supported(ver_v.fn),
                        ["fullPath"] = ver_v.fn,
                        ["mPath"] = ver_v.mpath,
                        ["formattedName"] = formattedName
                    }
                end
            end
        end
    end
    -- pathT
    for m_path_k, m_path_v in pairs(mpathMapT) do
        local mp = trace_module_paths(m_path_k, mpathMapT)
        if #mp[1] == 0 then
            break
        else
            pathT[m_path_k] = {}
            for si, sv in ipairs(mp) do
                pathT[m_path_k][table.concat(sv, ";")] = true
            end
        end
    end

    -- write out cache
    local cacheT = {
        ["timestamp"] = os.time(),
        ["moduleT"] = moduleT,
        ["pathT"] = pathT
    }
    local cacheT_json = json.encode(cacheT)

    os.execute("mkdir -p " .. string.format("%s/.cache/olcf_spider/%s", os.getenv("HOME"), cosmic:value("LMOD_SYSTEM_NAME")))
    local f = io.open(string.format("%s/.cache/olcf_spider/%s/cache.json", os.getenv("HOME"), cosmic:value("LMOD_SYSTEM_NAME")), "w")
    f:write(cacheT_json)
    f:close()

    return cacheT
end

function indexed_cache(c)
    local ic = {}
    for e_k, e_v in pairs(c) do
        if ic[c[e_k]["name"]] ~= nil then
            table.insert(ic[c[e_k]["name"]], c[e_k])
        else
            ic[c[e_k]["name"]] = {c[e_k], }
        end
    end
    return ic
end

function cache_lookup(c, search, re)
    local hits = {}
    local tmp = indexed_cache(c)
    if tmp[search] then
        -- see if there is an exact match
        hits =  { [search] = tmp[search], }
    elseif re then
        -- handle regexp
        tmp = {}
        for m_k, m_v in pairs(c) do
            local mvs = m_v.name .. "/" .. m_v.version
            if mvs:find(search, 1, false) then
                tmp[m_k] = m_v
            end
        end
        hits = indexed_cache(tmp)
    else
        tmp = {}
        for m_k, m_v in pairs(c) do
            local mvs = m_v.name .. "/" .. m_v.version
            if mvs:find(search, 1, true) then
                tmp[m_k] = m_v
            end
        end
        hits = indexed_cache(tmp)
    end
    return hits
end

function olcf_spider(usrCmd)
    if usrCmd == 'spider' then
        local spider_output = ""

        -- get option table and twidth
        local optionTbl = optionTbl()

        -- get the cache
        local cache = nil
        local f = io.open(string.format("%s/.cache/olcf_spider/%s/cache.json", os.getenv("HOME"), cosmic:value("LMOD_SYSTEM_NAME")), "r")
        if f == nil or optionTbl.ignoreCache then
            cache = build_cache()
        else
            cache = json.decode(f:read("*all"))
            local cache_age = os.time() - cache.timestamp
            if cache_age > 86400 then
                cache = build_cache()
            end
            f:close()
        end

        -- print spider output

        -- print header
        spider_output = spider_output .. string.rep("-", twidth) .. "\n"
        if cosmic:value("LMOD_COLORIZE") == "no" then
            spider_output = spider_output .. "(NSP SPIDER): WARNING >>> Not all modules shown here are" ..
                                " supported. Support is indicated below.\n"
        else
            spider_output = spider_output .. "(" .. colorize("magenta", "NSP SPIDER") .. "): " ..
                                colorize("red", "Modules in RED are not supported!") ..
                                "    (for non-colorized output, set LMOD_COLORIZE=0)\n"
        end
        spider_output = spider_output .. string.rep("-", twidth) .. "\n"

        -- handel each search
        if #optionTbl.pargs == 0 then
            local i_cache = indexed_cache(cache.moduleT)
            for entry_k, entry_v in pairsByKeys(i_cache) do
                -- start the entry for a module
                local m_str = colorize("cyan", string.format("  %s", entry_k)) .. ":"
                -- get unique versions
                local versions = {}
                for m_k, m_v in pairs(entry_v) do
                    versions[m_v.formattedName] = {
                        ["name"] = m_v.name,
                        ["version"] = m_v.version
                    }
                end

                -- construct entry string
                if cosmic:value("LMOD_COLORIZE") == "no" then
                    local supported_str = ""
                    local unsupported_str = ""
                    for v_k, v_v in pairsByKeys(versions) do
                        if v_k:find("(NS)", 1, true) then
                            unsupported_str = unsupported_str .. " " .. v_v.name
                            if v_v.version ~= "" then
                                unsupported_str = unsupported_str .. "/" .. v_v.version
                            end
                        else
                            supported_str = supported_str .. " " .. v_v.name
                            if v_v.version ~= "" then
                                supported_str = supported_str .. "/" .. v_v.version
                            end
                        end
                    end
                    if supported_str:len() > 0 then
                        m_str = m_str .. "\n    Supported:" .. supported_str
                    end
                    if unsupported_str:len() > 0 then
                        m_str = m_str .. "\n    Unsupported:" .. unsupported_str
                    end
                else
                    for v_k, v_v in pairsByKeys(versions) do
                        if v_k:find("(NS)", 1, true) then
                            m_str = m_str .. " " .. colorize("red", v_v.name)
                        else
                            m_str = m_str .. " " .. colorize("green", v_v.name)
                        end
                        if v_v.version ~= "" then
                            m_str = m_str .. "/" .. colorize("yellow", v_v.version)
                        end
                    end
                end

                spider_output = spider_output .. m_str .. "\n\n"
            end
            spider_output = spider_output .. string.rep("-", twidth) .. "\n\n" ..
                "To learn more about a package execute:\n\n" ..
                "    $ module spider Foo\n\n" ..
                'where "Foo" is the name of a module.\n\n' ..
                "To find detailed information about a particular package you\n" ..
                "must specify the version if there is more than one version:\n\n" ..
                "    $ module spider Foo/11.1\n\n" .. string.rep("-", twidth) .. "\n"
        else
            -- search cache
            local print_help_meg = false
            local res = {}
            for parg_i, parg_v in ipairs(optionTbl.pargs) do
                res[parg_v] = cache_lookup(cache.moduleT, parg_v, optionTbl.regexp)
            end
            for ss, r in pairs(res) do
                -- check length
                local len = 0
                local o_name = nil
                for xk, xv in pairs(r) do
                    len = len + 1
                    o_name = xk
                end
                -- handel no results
                if len == 0 then
                    spider_output = spider_output .. string.rep("-", twidth) .. "\n" ..
                                        colorize("cyan", string.format("  %s", ss:split_string("/")[1])) ..
                                        ":\n" .. string.rep("-", twidth) .. "\n" ..
                                        colorize("red", string.format("    Sorry, no matches can be found for '%s'!", ss)) ..
                                        "\n\n"
                else
                    -- check for exact matches
                    local exact_matches = {}
                    if len == 1 then
                        for match_k, match_v in ipairs(r[o_name]) do
                            if match_v.version == "" then
                                if ss == match_v.name then
                                    table.insert(exact_matches, match_v)
                                end
                            else
                                if ss == match_v.name .. "/" .. match_v.version then
                                    table.insert(exact_matches, match_v)
                                end
                            end
                        end
                    end

                    if #exact_matches > 0 then
                        local direct_load = false
                        local variants = {}
                        for _i, _v in ipairs(exact_matches) do
                            if not cache.pathT[_v.mPath] then
                                direct_load = true
                            else
                                for mk, mv in pairs(cache.pathT[_v.mPath]) do
                                    table.insert(variants, mk)
                                end
                            end
                        end
                        table.sort(variants)

                        spider_output = spider_output .. string.rep("-", twidth) .. "\n" ..
                                            colorize("cyan", string.format("  %s", o_name)) .. ":\n" ..
                                            string.rep("-", twidth) .. "\n"
                        if direct_load then
                            spider_output = spider_output .. string.format("    This module can be loaded directly: 'module load %s'\n", ss) .. "\n"
                            if #exact_matches > 1 then
                                spider_output = spider_output .. "    Additional variants of this module can " ..
                                                    "be loaded after loading all the module(s) on one of the lines below:\n\n"
                                if cosmic:value("LMOD_COLORIZE") == "no" then
                                    local supported = {}
                                    local unsupported = {}
                                    for msi, msv in ipairs(variants) do
                                        if msv:find("(NS)", 1, true) then
                                            table.insert(unsupported, msv)
                                        else
                                            table.insert(supported, msv)
                                        end
                                    end
                                    if #supported > 0 then
                                        spider_output = spider_output .. "    Supported:\n"
                                        for iii, vvv in ipairs(supported) do
                                            local mtL = vvv:split_string(";")
                                            spider_output = spider_output .. "      " .. table.concat(mtL, "  ") .. "\n"
                                        end
                                    end
                                    if #supported > 0 and #unsupported > 0 then
                                        spider_output = spider_output .. "\n"
                                    end
                                    if #unsupported > 0 then
                                        spider_output = spider_output .. "    Unsupported:\n"
                                        for iii, vvv in ipairs(unsupported) do
                                            local mtL = (vvv:gsub("%(NS%)", "")):split_string(";")
                                            spider_output = spider_output .. "      " .. table.concat(mtL, "  ") .. "\n"
                                        end
                                    end
                                else
                                    for msi, msv in ipairs(variants) do
                                        local mtL = msv:split_string(";")
                                        local m_str = "    "
                                         for v_i, v_v in ipairs(mtL) do
                                            local mtL_parts = v_v:split_string("/")
                                            if v_v:find("(NS)", 1, true) then
                                                m_str = m_str .. "  " .. colorize("red", mtL_parts[1])
                                            else
                                                m_str = m_str .. "  " .. colorize("green", mtL_parts[1])
                                            end
                                            if #mtL_parts > 1 then
                                                m_str = m_str .. "/" .. colorize("yellow", (mtL_parts[2]:gsub("%(NS%)", "")))
                                            end
                                        end
                                        spider_output = spider_output .. m_str .. "\n"
                                    end
                                end
                            end
                        else
                            spider_output = spider_output ..
                                                string.format("    You will need to load all module(s) on one " ..
                                                "of the lines below before the '%s' module is available to load.\n", ss) .. "\n"
                            if cosmic:value("LMOD_COLORIZE") == "no" then
                                local supported = {}
                                local unsupported = {}
                                for msi, msv in ipairs(variants) do
                                    if msv:find("(NS)", 1, true) then
                                        table.insert(unsupported, msv)
                                    else
                                        table.insert(supported, msv)
                                    end
                                end
                                if #supported > 0 then
                                    spider_output = spider_output .. "    Supported:\n"
                                    for iii, vvv in ipairs(supported) do
                                        local mtL = vvv:split_string(";")
                                        spider_output = spider_output .. "      " .. table.concat(mtL, "  ") .. "\n"
                                    end
                                end
                                if #supported > 0 and #unsupported > 0 then
                                    spider_output = spider_output .. "\n"
                                end
                                if #unsupported > 0 then
                                    spider_output = spider_output .. "    Unsupported:\n"
                                    for iii, vvv in ipairs(unsupported) do
                                        local mtL = (vvv:gsub("%(NS%)", "")):split_string(";")
                                        spider_output = spider_output .. "      " .. table.concat(mtL, "  ") .. "\n"
                                    end
                                end
                            else
                                for msi, msv in ipairs(variants) do
                                    local mtL = msv:split_string(";")
                                    local m_str = "    "
                                     for v_i, v_v in ipairs(mtL) do
                                        local mtL_parts = v_v:split_string("/")
                                        if v_v:find("(NS)", 1, true) then
                                            m_str = m_str .. "  " .. colorize("red", mtL_parts[1])
                                        else
                                            m_str = m_str .. "  " .. colorize("green", mtL_parts[1])
                                        end
                                        if #mtL_parts > 1 then
                                            m_str = m_str .. "/" .. colorize("yellow", (mtL_parts[2]:gsub("%(NS%)", "")))
                                        end
                                    end
                                    spider_output = spider_output .. m_str .. "\n"
                                end
                            end
                        end

                        spider_output = spider_output .. "\n"

                    else
                        print_help_meg = true
                        local possible_matches = ""
                        -- look for other possible matches
                        if len == 1 then
                            possible_matches = "    Other possible modules matches:\n      "
                            for kkk, vvv in pairs(cache_lookup(cache.moduleT, "^[^/]*" .. o_name:gsub("%-", "%%-"), true)) do
                                if kkk ~= o_name then
                                    possible_matches = possible_matches .. kkk .. "  "
                                end
                            end
                            if #possible_matches > 42 then
                                possible_matches = possible_matches .. "\n"
                            else
                                possible_matches = ""
                            end
                        end
                        for match_m_k, match_m_v in pairs(r) do
                            spider_output = spider_output .. string.rep("-", twidth) .. "\n"
                            spider_output = spider_output .. colorize("cyan", string.format("  %s", match_m_k)) .. ":\n"
                            spider_output = spider_output .. string.rep("-", twidth) .. "\n"
                            local m_str = ""

                            local versions = {}
                            for m_k, m_v in pairs(match_m_v) do
                                versions[m_v.formattedName] = {
                                    ["name"] = m_v.name,
                                    ["version"] = m_v.version
                                }
                            end

                            -- construct entry string
                            if cosmic:value("LMOD_COLORIZE") == "no" then
                                local supported_str = ""
                                local unsupported_str = ""
                                for v_k, v_v in pairsByKeys(versions) do
                                    if v_k:find("(NS)", 1, true) then
                                        unsupported_str = unsupported_str .. "      " .. v_v.name
                                        if v_v.version ~= "" then
                                            unsupported_str = unsupported_str .. "/" .. v_v.version
                                        end
                                        unsupported_str = unsupported_str .. "\n"
                                    else
                                        supported_str = supported_str .. "      " .. v_v.name
                                        if v_v.version ~= "" then
                                            supported_str = supported_str .. "/" .. v_v.version
                                        end
                                        supported_str = supported_str .. "\n"
                                    end
                                end
                                if supported_str:len() > 0 then
                                    m_str = m_str .. "    Supported:\n" .. supported_str
                                end
                                if supported_str:len() > 0 and unsupported_str:len() > 0 then
                                    m_str = m_str .. "\n"
                                end
                                if unsupported_str:len() > 0 then
                                    m_str = m_str .. "    Unsupported:\n" .. unsupported_str
                                end
                            else
                                m_str = m_str .. "    Versions:\n"
                                for v_k, v_v in pairsByKeys(versions) do
                                    if v_k:find("(NS)", 1, true) then
                                        m_str = m_str .. "      " .. colorize("red", v_v.name)
                                    else
                                        m_str = m_str .. "      " .. colorize("green", v_v.name)
                                    end
                                    if v_v.version ~= "" then
                                        m_str = m_str .. "/" .. colorize("yellow", v_v.version)
                                    end
                                    m_str = m_str .. "\n"
                                end
                            end

                            spider_output = spider_output .. m_str .. possible_matches .. "\n"

                        end
                    end
                end
            end
            if print_help_meg then
                spider_output = spider_output .. string.rep("-", twidth) .. "\n" ..
                    "For detailed information about a specific module use the module's full name.\n" ..
                    "For example:\n\n" ..
                    "    $ module spider Foo/1.2.3\n" .. string.rep("-", twidth) .. "\n"
            end
        end
        pcall(pager, io.stderr, spider_output)
        os.exit(0)
    end
end

--------------------------------------------------------------------------------

{% if NSP_LMOD_enable_logging %}
function register_module_loads(t)
    local load_entry = {
        ['username'] = user,
        ['module_name'] = t.mname.__sn,
        ['path_to_module'] = t.mname.__fn,
        ['hostname'] = hostname,
        ['system'] = system
    }
    if t.mname.__version then
        load_entry['module_version'] = t.mname.__version
    end
    table.insert(gl_load_logs, load_entry)
end

function log_module_loads(UsrCmd)
    -- Check that we are loading modules
    if (mode() ~= "load") or #gl_load_logs <= 0 then return end

    -- log the loads
    local curl_cmd = string.format(
        "curl --max-time 3 -X 'POST' '{{ NSP_LMOD_logging_url }}' -H 'accept: application/json' -H 'Content-Type: application/json' -d '%s' > /dev/null 2>&1",
        json.encode(gl_load_logs)
    )
    os.execute(curl_cmd)
end
{% endif %}

-- register hooks
Hook.register('load', observe_and_trigger)
{% if NSP_LMOD_enable_logging %}
Hook.register('finalize', log_module_loads)
{% endif %}
Hook.register('unload', observe_and_trigger)
Hook.register('avail', label_paths)
Hook.register('startup', olcf_spider)
