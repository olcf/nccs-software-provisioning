- name: Cleanup Spack Repository {{ _SPACK_version.key }}({{ _SPACK_version.value.git_reference }})
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      exit_code=0;
      for f in $(git -C {{ [NSP_SPACK_root, 'configs/spack-{}'.format(_SPACK_version.key)] | path_join }} status -s \
          | awk '$1 == "??" {print $2}'); do
          rm -rf {{ [NSP_SPACK_root, 'configs/spack-{}'.format(_SPACK_version.key)] | path_join }}/${f};
          exit_code=3;
      done;
      exit ${exit_code};
    executable: /bin/bash
  register: result
  changed_when: result.rc == 3
  failed_when: result.rc != 0 and result.rc != 3
  when: "[NSP_SPACK_root, 'configs/spack-{}'.format(_SPACK_version.key)] | path_join is directory
    and not ansible_check_mode"
  tags:
    - spack
    - configuration
    - "{{ _SPACK_version.key }}"

- name: Clone Spack Repository {{ _SPACK_version.key }}({{ _SPACK_version.value.git_reference }})
  ansible.builtin.git:
    repo: "{{ NSP_SPACK_repo }}"
    dest: "{{ [NSP_SPACK_root, 'configs/spack-{}'.format(_SPACK_version.key)] | path_join }}"
    clone: "{{ NSP_SPACK_clone }}"
    force: true
    update: true
    version: "{{ _SPACK_version.value.git_reference }}"
  when: not ansible_check_mode
  tags:
    - spack
    - configuration
    - "{{ _SPACK_version.key }}"

- name: Patch Spack Repository {{ _SPACK_version.key }}({{ _SPACK_version.value.git_reference }})
  ansible.posix.patch:
    src: "{{ [playbook_dir, 'spack/patches', _SPACK_version.value.patch] | path_join }}"
    basedir: "{{ [NSP_SPACK_root, 'configs/spack-{}'.format(_SPACK_version.key)] | path_join }}"
    strip: 1
  when: _SPACK_version.value.patch is defined and _SPACK_version.value.patch and not ansible_check_mode
  tags:
    - spack
    - configuration
    - "{{ _SPACK_version.key }}"
